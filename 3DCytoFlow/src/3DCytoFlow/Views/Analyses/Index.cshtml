@using System.Threading.Tasks
@using _3DCytoFlow.ViewModels.Analysis
@model List<AnalysisViewModel>

@{
    ViewBag.Title = "Results";
    var directory = "";
}

<link rel="stylesheet" type="text/css" href="~/css/stylish.css">
<link rel="stylesheet" type="text/css" href="~/css/semantic.min.css">
<script src="~/js/three.min.js"></script>
<script src="~/js/OrbitControls-Touch.js"></script>
<script src="~/js/rAF.js"></script>
<script src="~/js/lodash.min.js"></script>
<script src="~/js/semantic.min.js"></script>
<link rel="stylesheet" type="text/css" href="~/css/bootstrap-colorselector.css" />
<script src="~/js/bootstrap-colorselector.js"></script>

<style>
    div#loader {
        margin-left: 15px;
    }

    div.ui.large.indeterminate.loader::after, div.ui.large.indeterminate.loader::before {
        margin-left: -50px;
    }

    div#page-wrapper {
        min-height: calc(100vh - 70px);
    }

    .undraggable {
        user-select: none;
        -moz-user-select: none;
        -webkit-user-drag: none;
        -webkit-user-select: none;
        -ms-user-select: none;
        -webkit-touch-callout: none;
        -khtml-user-select: none;
    }

</style>

<div id="page-wrapper">
    <div id="body3" class="noselect undraggable">
        <div class="form-group noselect undraggable" draggable="false" contenteditable="false" id="analysisGroup">          
            <div>
                @{
                    if (Model.Any(analysis => analysis.ResultFilePath != null && !analysis.ResultFilePath.Equals("")))
                    {
                        <div class="label noselect undraggable" id="label2">Patient's Name - Data Upload Date</div>
                        <select class="form-control noselect undraggable" name="status" id="analysisSelect">
                            
                            @foreach (var analysis in Model.Where(x => x.ResultFilePath != null && !x.ResultFilePath.Equals("")))
                            {
                                if (string.IsNullOrWhiteSpace(directory))
                                {
                                    directory = analysis.UserLastName + "-" + analysis.UserFirstName + "/";
                                    directory = directory.ToLower();
                                }

                                var displayName = analysis.PatientLastName + ", " + @analysis.PatientFirstName + " | " + analysis.Date.ToString("MM-dd-yyyy");

                                <option class="noselect undraggable" value="@analysis.Id">@displayName</option>
                            }

                        </select>
                        <div id="clusterBox">
                            <div class="label noselect undraggable" id="label3">Clusters</div>

                            <input id="clusterInput" class="form-control noselect undraggable" type="text" placeholder="cluster name">
                            <div>
                                <input type="submit" id="clusterButton" onclick="addCluster();" value="Add" class="btn btn-primary noselect undraggable" />
                                <input type="submit" id="clusterButton2" onclick="removeCluster();" value="Remove" class="btn btn-primary noselect undraggable" />
                            </div>
                            <input id="deleteButton" analysis="@Model.First().Id" class="btn btn-danger noselect undraggable" type="button" value="Delete" />
                        </div>
                        
                      }
                }                 
            </div>
        </div>

        <div id="info-box" class="hidden">
            <div class="ui segment noselect undraggable">
                <div class="ui green inverted statistic noselect undraggable">
                    <div id="statsSize" class="value noselect undraggable">
                        0
                    </div>
                    <div class="label noselect undraggable">
                        Points Plotted
                    </div>
                </div>
                <div class="ui blue inverted statistic noselect undraggable">
                    <div id="clusterSize" class="value noselect undraggable">
                        0
                    </div>
                    <div class="label noselect undraggable">
                        Clusters
                    </div>
                </div>
            </div>
            <div class="ui divider noselect undraggable"></div>
            <i class="ui white big undo icon noselect undraggable" style="cursor: pointer;"></i>

            <div class="ui inverted toggle checkbox noselect undraggable">
                <label id="rotateLabel" class="noselect undraggable">Rotate</label>
                <input type="checkbox" class="noselect undraggable" name="rotateCheckbox" checked="checked" onClick="rotateToggle()">
            </div>

            <div class="ui divider noselect undraggable"></div>
            <div id="clusterInfo" class="noselect undraggable">          
            </div>

        </div>

        <i class="fixed big white info icon noselect undraggable" style="cursor: pointer;" id="infoButt"></i>

        <!--PUSHER -->
        <div class="pusher">
            <canvas id="data-canvas"></canvas>
            <div class="ghost-select"><span></span></div>
            <div id="loader">
                <div class="ui large indeterminate loader"></div>
            </div>
        </div>

        <script src="~/js/dreda.js"></script>
        <script src="~/js/ui.js"></script>
        <script>
            var selectedColor;
            $(document).ready(function () {
                //download current result
                @{
                    if (Model.Any(analysis => analysis.ResultFilePath != null && !analysis.ResultFilePath.Equals("")))
                    {
                        <text>
                        DownloadCurrentResult();
                        selectedColor = colors[0];
                        //fill the color selector
                        fillColorSelector();
                        </text>
                    }
                }
                       
                //remove after testing
                $('#analysisSelect').on('change', function () {
                    $('#deleteButton').attr('analysis', this.value);
                    DownloadCurrentResult();
                });

                $('#deleteButton').click(function (e) {

                    var id = $(this).attr("analysis");

                    location.href = '@Url.Content("~/Analyses/Delete/")' + id;
                });

            });

            function DownloadCurrentResult() {

                $("#loader").addClass("ui active dimmer");

                $.ajax({
                    type: "POST",
                    async: true,
                    url: "/File/DownloadResult?analysisId=" + $('#analysisSelect option:selected').attr("value")
                }).done(function (model) {

                    if (model !== undefined && model !== "") {
                        //test
                        var fake = '{"x": {"0": "3", "1": "4" }, "y": {"0": "6", "1": "9" }, "z": {"0": "6", "1": "9" }}';
                        //test
                        data = JSON.parse(fake);
                        //plot the graph
                        plot(data);

                        //add the clusters
                        getClusters();
                    } else {
                        $("#loader").removeClass("ui active dimmer");
                        alert("This file is corrupted. Press the red button to delete it");
                    }
                }).fail(function () {
                    $("#loader").removeClass("ui active dimmer");
                    alert("failed");
                });
            }

            function get_content() {
                var html = document.getElementById("txt").innerHTML;
                document.getElementById("txt").innerHTML = html.replace(/<[^>]*>/g, "");
            }

            function fillColorSelector() {
                $('#clusterInput').after('<select class="form-control" id="colorselector" style="margin: 10px;"></select>');

                for (var i = 0; i < colors.length; i++) {
                    $('#colorselector').append('<option value="'+ i +'" data-color="' + colors[i].toUpperCase() + '"></option>');
                }

                $('#colorselector').colorselector({
                    callback: function (value, color, title) {
                        selectedColor = color;
                    }
                });
            }

            function addCluster() {

                //get the cluster name
                var clusterName = $("#clusterInput").val();

                //if the name is empty don't do anything else
                if (clusterName === undefined || clusterName === "") return;
                
                //loading animation
                $("#loader").addClass("ui active dimmer");

                //get the id of the current analysis
                var analysisId = $('#deleteButton').attr('analysis');

                //remove hashtag from hex
                var color = selectedColor.split("#");

                //TODO:this is a fake model to simulate a real cluster being passed to the server
                var fakeModel = { Id: analysisId, Name: clusterName, Color: color[1], Depth: 15.52, Width: 23.58, Height: 50.8, X: 15.0, Y: 17.6, Z: 9 };
                var jsonModel = JSON.stringify(fakeModel);
                //END
               
                $.ajax({
                    type: "POST",
                    async: true,
                    url: "/Clusters/SaveCluster?model=" + jsonModel
                }).done(function (model) {
                    //if everything worked, remove the loading screen and add the cluster to the list of clusters
                    $("#loader").removeClass("ui active dimmer");
                    $('#clusterInfo').append('<div style="color:' + selectedColor + ';">' + clusterName + '</div>');
                }).fail(function () {
                    //if failed, remove the loading screen and notify user
                    $("#loader").removeClass("ui active dimmer");
                    alert("failed to add cluster");
                });
            }

            function removeCluster() {
                //get the cluster name
                var clusterName = $('#clusterInfo').children().last().text();

                //if the name is empty don't do anything else
                if (clusterName === undefined || clusterName === "") return;

                //loading screen
                $("#loader").addClass("ui active dimmer");

                //get the id of the current analysis
                var analysisId = $('#deleteButton').attr('analysis');

                //TODO:this is a fake model to simulate a real cluster being passed to the server
                var fakeModel = { Id: analysisId, Name: clusterName };
                var jsonModel = JSON.stringify(fakeModel);
                //END

                $.ajax({
                    type: "POST",
                    async: true,
                    url: "/Clusters/RemoveCluster?model=" + jsonModel
                }).done(function (model) {
                    //if everything worked, remove the loading screen and remove the cluster from the list of clusters
                    $("#loader").removeClass("ui active dimmer");
                    $('#clusterInfo').children().last().remove();
                }).fail(function () {
                    //if failed, remove the loading screen and notify user
                    $("#loader").removeClass("ui active dimmer");
                    alert("failed to remove cluster");
                });                  
            }

            function getClusters() {
                //get the id of the current analysis
                var analysisId = $('#deleteButton').attr('analysis');

                //if there is no id return
                if (analysisId === undefined || analysisId === "") return;

                //loading screen
                $("#loader").addClass("ui active dimmer");

                $.ajax({
                    type: "GET",
                    async: true,
                    url: "/Clusters/GetClusters?id=" + analysisId
                }).done(function (model) {

                    if (model !== undefined) {
                        //if everything worked, remove the loading screen and add the clusters to the list of clusters
                        var json = JSON.parse(model);
                        for (var i = 0; i < json.length; i++) {

                            var cluster = json[i];

                            var split = cluster.Name.split("#");

                            var color = "#" + split[1];

                            $('#clusterInfo').append('<div style="color:' + color.toUpperCase() + ';">' + split[0] + '</div>');
                        }
                       
                        $("#loader").removeClass("ui active dimmer");
                    }

                }).fail(function () {
                    //if failed, remove the loading screen and notify user
                    $("#loader").removeClass("ui active dimmer");
                    alert("failed to retrieve clusters");
                });
            }
        </script>
    </div>
</div>