@using System.Threading.Tasks
@using _3DCytoFlow.ViewModels.Analysis
@model List<AnalysisViewModel>

@{
    ViewBag.Title = "Results";
    var directory = "";
}

<link rel="stylesheet" type="text/css" href="~/css/stylish.css">
<link rel="stylesheet" type="text/css" href="~/css/semantic.min.css">
<script src="~/js/three.min.js"></script>
<script src="~/js/OrbitControls-Touch.js"></script>
<script src="~/js/rAF.js"></script>
<script src="~/js/lodash.min.js"></script>
<script src="~/js/semantic.min.js"></script>
<link rel="stylesheet" type="text/css" href="~/css/bootstrap-colorselector.css" />
<script src="~/js/bootstrap-colorselector.js"></script>

<style>
    div#loader {
        margin-left: 15px;
    }

    div.ui.large.indeterminate.loader::after, div.ui.large.indeterminate.loader::before {
        margin-left: -50px;
    }

    div#page-wrapper {
        min-height: calc(100vh - 70px);
    }

    .undraggable {
        user-select: none;
        -moz-user-select: none;
        -webkit-user-drag: none;
        -webkit-user-select: none;
        -ms-user-select: none;
        -webkit-touch-callout: none;
        -khtml-user-select: none;
        -o-user-select: none;
    }

    kbd {
        padding:0.1em 0.6em;
        border:1px solid #ccc;
        font-size:11px;
        font-family:Arial, Helvetica, sans-serif;
        background-color:#f7f7f7;
        color:#333;
        -moz-box-shadow:0 1px 0px rgba(0, 0, 0, 0.2), 0 0 0 2px #ffffff inset;
        -webkit-box-shadow:0 1px 0px rgba(0, 0, 0, 0.2), 0 0 0 2px #ffffff inset;
        box-shadow:0 1px 0px rgba(0, 0, 0, 0.2), 0 0 0 2px #ffffff inset;
        -moz-border-radius:3px;
        -webkit-border-radius:3px;
        border-radius:3px;
        display:inline-block;
        margin:0 0.1em;
        text-shadow:0 1px 0 #fff;
        line-height:1.4;
        white-space:nowrap;
    }

</style>

<div id="page-wrapper">
    <div id="body3" class="noselect undraggable">
        <div class="form-group noselect undraggable" draggable="false" ondrag="return false" contenteditable="false" id="analysisGroup" style="width: 20%;">
            <div>
                @{
                    if (Model.Any())
                    {
                        <div class="label noselect undraggable" id="label2">Patient's Name - Data Upload Date</div>
                        <select class="form-control noselect undraggable" name="status" id="analysisSelect">

                            @foreach (var analysis in Model)
                            {
                                TimeSpan? fCT = null;
                                if (analysis.Etc != null)
                                {
                                    fCT = new TimeSpan(analysis.Etc.Value.Subtract(DateTime.Now.ToUniversalTime()).Ticks);
                                }

                                if (string.IsNullOrWhiteSpace(directory))
                                {
                                    directory = analysis.UserLastName + "-" + analysis.UserFirstName + "/";
                                    directory = directory.ToLower();
                                }

                                if (analysis.ResultFilePath != null && !analysis.ResultFilePath.Equals(""))
                                {
                                    var displayName = analysis.PatientLastName + ", " + @analysis.PatientFirstName + " | ";
                                    displayName += analysis.Date.ToString("MM-dd-yyyy");
                                    <option class="noselect undraggable" value="@analysis.Id">@displayName</option>
                                }
                                else if (analysis.Etc != null && fCT != null && fCT.Value.CompareTo(TimeSpan.Zero) > 0)
                                {
                                    var displayName = analysis.PatientLastName + ", " + @analysis.PatientFirstName + " | ";
                                    // FinalCompletionTime
                                    var fct = new TimeSpan(fCT.Value.Days, fCT.Value.Hours, fCT.Value.Minutes, fCT.Value.Seconds);
                                    var str = string.Format("{0}", fct);
                                    displayName += str;
                                    <option class="noselect undraggable" value="@analysis.Id" completion-time="@analysis.Etc.Value.Ticks">@displayName</option>
                                }
                                else if (analysis.Etc != null && fCT != null && fCT.Value.CompareTo(TimeSpan.Zero) <= 0)
                                {
                                    var displayName = analysis.PatientLastName + ", " + @analysis.PatientFirstName + " | ";
                                    // FinalCompletionTime
                                    displayName += "Getting results ready for visualization";
                                    <option class="noselect undraggable" value="@analysis.Id">@displayName</option>
                                }
                                else
                                {
                                    var displayName = analysis.PatientLastName + ", " + @analysis.PatientFirstName + " | ";
                                    displayName += "Waiting to be analyzed";
                                    <option class="noselect undraggable" value="@analysis.Id">@displayName</option>
                                }
                            }

                        </select>
                        <div id="clusterBox">
                            <div class="label noselect undraggable" id="label3">Clusters</div>

                            <input id="clusterInput" class="form-control noselect undraggable" type="text" placeholder="cluster name">
                            <div>
                                <input type="submit" id="clusterButton" onclick="addCluster();" value="Add" class="btn btn-primary noselect undraggable"/>
                                <input type="submit" id="clusterButton2" onclick="removeCluster();" value="Remove" class="btn btn-primary noselect undraggable"/>
                            </div>
                            <input id="deleteButton" analysis="@Model.First().Id" class="btn btn-danger noselect undraggable" type="button" value="Delete"/>

                        </div>


                    }
                }
            </div>
            <div class="fixed big white info icon noselect undraggable" style="display: none;" id="timeIcon"></div>
        </div>

        <div id="info-box" class="hidden">
            <div class="ui segment noselect undraggable">
                <div class="ui green inverted statistic noselect undraggable">
                    <div id="statsSize" class="value noselect undraggable">
                        0
                    </div>
                    <div class="label noselect undraggable">
                        Points Plotted
                    </div>
                </div>
                <div class="ui blue inverted statistic noselect undraggable">
                    <div id="clusterSize" class="value noselect undraggable">
                        0
                    </div>
                    <div class="label noselect undraggable">
                        Clusters
                    </div>
                </div>
            </div>
            <div class="ui divider noselect undraggable"></div>
            <i class="ui white big undo icon noselect undraggable" style="cursor: pointer;"></i>

            <div class="ui inverted toggle checkbox noselect undraggable">
                <label id="rotateLabel" class="noselect undraggable">Rotate</label>
                <input type="checkbox" class="noselect undraggable" name="rotateCheckbox" onClick="rotateToggle()">
            </div>

            <div class="ui divider noselect undraggable"></div>
            <input class="checker" style="margin-right: 10px;" type="checkbox" name="" value=""><span id="" style="color: white;">Check/Uncheck Clusters</span>
            <div id="clusterInfo" class="noselect undraggable">          
            </div>
            
        </div>

        <i class="fixed big white info icon noselect undraggable" style="cursor: pointer;" id="infoButt"></i>
      
        <!--PUSHER -->
        <div class="pusher">
            <canvas id="data-canvas"></canvas>
            <div class="ghost-select"><span></span></div>
            <div id="loader">
                <div class="ui large indeterminate loader"></div>
            </div>
        </div>

        <script src="~/js/dreda.js"></script>
        <script src="~/js/ui.js"></script>
    <script>
        var currentClusters;
        var selectedColor;
        $(document).ready(function () {
            

            $('#analysisSelect').multiselect({
                enableFiltering: true,
                enableCaseInsensitiveFiltering: true
            });

            $(".multiselect").css("margin-left", "10px");
            //download current result if available
            @{
                if (Model.Any())
                {
                    <text>
                        DownloadCurrentResult();
                        selectedColor = colors[0];
                        $("#timeIcon").css("color", selectedColor);
                        //fill the color selector
                        fillColorSelector();
                    </text>
                }
            }

            //remove after testing
            $('#analysisSelect').on('change', function() {
                $('#deleteButton').attr('analysis', this.value);
                DownloadCurrentResult();
            });

            $('#deleteButton').click(function(e) {
                var id = $(this).attr("analysis");
                location.href = '@Url.Content("~/Analyses/Delete/")' + id;
            });

            //bind the 'check/uncheck all clusters' checkbox and its event
            $('.checker').prop('checked', true);
            $('.checker').change(function () {

                var selected = $(this).is(":checked");
                $('.clusterCheck').each(function () {                   
                    if (selected) {
                        $(this).prop('checked', true);
                    }
                       
                    else{
                        $(this).prop('checked', false);
                    }
                    var id = $(this).attr('value');
                    window.selectDeselectClusters(id, $(this));
                });
            });
        });

        //downloads the current result selected in the dropdownmenu
        function DownloadCurrentResult() {

            clearInterval(interval);
            $("#timeIcon").hide();

            currentClusters = [];

            $("#loader").addClass("ui active dimmer");

            $.ajax({
                type: "POST",
                async: true,
                url: "/File/DownloadResult?analysisId=" + $('#analysisSelect option:selected').attr("value")
            }).done(function(model) {

                if (model !== undefined && model !== "") {                 
                    if (typeof model.ETC != "undefined") {
                        //if analysis has not been finished
                        $("#loader").removeClass("ui active dimmer");
                        clear();

                        if (model.ETC !== "null") {
                            $("#timeIcon").show();
                            updateTimer($('#analysisSelect option:selected').attr("completion-time"));
                        }
                        
                    } else if (typeof model.message != "undefined") {
                        //if analysis has not been finished
                        $("#loader").removeClass("ui active dimmer");
                        clear();
                        alert(model.message);
                    } else{
                        //parse data
                        window.data = JSON.parse(model);
                        //plot the graph
                        plot(data);
                    }
                } else {
                    $("#loader").removeClass("ui active dimmer");
                    alert("This file is not ready yet");
                }
            }).fail(function() {
                $("#loader").removeClass("ui active dimmer");
                alert("failed");
            });
        }

    </script>
        <script src="~/js/add-cluster.js"></script>
        <script src="~/js/remove-cluster.js"></script>
        <script src="~/js/get-clusters.js"></script>
        <script type="x-shader/x-vertex" id="vertexshader">

            attribute float alpha;
            attribute vec3 color;

            varying float vAlpha;
            varying vec3 vColor;
            varying vec2 vUv;

            void main() {

            vAlpha = alpha;
            vColor = color;           

            vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );

            gl_PointSize = 10.0;

            gl_Position = projectionMatrix * mvPosition;
            //gl_Position = vec4(0.5, 0.5, 0.5, 0.0);
            vUv = vec2(gl_Position.x/gl_Position.w/2.0 + 1.0/2.0, gl_Position.y/gl_Position.w/2.0 + 1.0/2.0);

            }

        </script>

        <script type="x-shader/x-fragment" id="fragmentshader">
            uniform float windowWidth;
            uniform float windowHeight;

            varying vec3 vColor;
            varying float vAlpha;
            varying vec2 vUv;

            void main() {
            
            float distX = abs(gl_FragCoord.x - windowWidth*vUv.x) / 3.0;
            float distY = abs(gl_FragCoord.y - windowHeight*vUv.y)  / 3.0;

            float z = 1.0 - sqrt(distX*distX + distY*distY) + 0.5;

            vec3 color = vColor;

            if( sqrt(distX*distX + distY*distY) > 3.0 )
                z = 0.0;

            gl_FragColor = vec4( color, z*vAlpha );

            }

        </script>      
    </div>
</div>