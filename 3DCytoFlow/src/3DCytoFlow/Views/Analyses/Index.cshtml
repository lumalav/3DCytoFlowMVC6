@using System.Threading.Tasks
@using _3DCytoFlow.ViewModels.Analysis
@model List<AnalysisViewModel>

@{
    ViewBag.Title = "Results";
    var directory = "";
}

<link rel="stylesheet" type="text/css" href="~/css/stylish.css">
<link rel="stylesheet" type="text/css" href="~/css/semantic.min.css">
<script src="~/js/three.min.js"></script>
<script src="~/js/OrbitControls-Touch.js"></script>
<script src="~/js/rAF.js"></script>
<script src="~/js/lodash.min.js"></script>
<script src="~/js/semantic.min.js"></script>
<link rel="stylesheet" type="text/css" href="~/css/bootstrap-colorselector.css" />
<script src="~/js/bootstrap-colorselector.js"></script>

<style>
    div#loader {
        margin-left: 15px;
    }

    div.ui.large.indeterminate.loader::after, div.ui.large.indeterminate.loader::before {
        margin-left: -50px;
    }

    div#page-wrapper {
        min-height: calc(100vh - 70px);
    }

    .undraggable {
        user-select: none;
        -moz-user-select: none;
        -webkit-user-drag: none;
        -webkit-user-select: none;
        -ms-user-select: none;
        -webkit-touch-callout: none;
        -khtml-user-select: none;
        -o-user-select: none;
    }

</style>

<div id="page-wrapper">
    <div id="body3" class="noselect undraggable">
        <div class="form-group noselect undraggable" draggable="false" ondrag="return false" contenteditable="false" id="analysisGroup" style="width: 20%;">          
            <div>
                @{
                    if (Model.Any(analysis => analysis.ResultFilePath != null && !analysis.ResultFilePath.Equals("")))
                    {
                        <div class="label noselect undraggable" id="label2">Patient's Name - Data Upload Date</div>
                        <select class="form-control noselect undraggable" name="status" id="analysisSelect">
                            
                            @foreach (var analysis in Model.Where(x => x.ResultFilePath != null && !x.ResultFilePath.Equals("")))
                            {
                                if (string.IsNullOrWhiteSpace(directory))
                                {
                                    directory = analysis.UserLastName + "-" + analysis.UserFirstName + "/";
                                    directory = directory.ToLower();
                                }

                                var displayName = analysis.PatientLastName + ", " + @analysis.PatientFirstName + " | " + analysis.Date.ToString("MM-dd-yyyy");

                                <option class="noselect undraggable" value="@analysis.Id">@displayName</option>
                            }

                        </select>
                        <div id="clusterBox">
                            <div class="label noselect undraggable" id="label3">Clusters</div>

                            <input id="clusterInput" class="form-control noselect undraggable" type="text" placeholder="cluster name">
                            <div>
                                <input type="submit" id="clusterButton" onclick="addCluster();" value="Add" class="btn btn-primary noselect undraggable" />
                                <input type="submit" id="clusterButton2" onclick="removeCluster();" value="Remove" class="btn btn-primary noselect undraggable" />
                            </div>
                            <input id="deleteButton" analysis="@Model.First().Id" class="btn btn-danger noselect undraggable" type="button" value="Delete" />
                        </div>
                        
                      }
                }                 
            </div>
        </div>

        <div id="info-box" class="hidden">
            <div class="ui segment noselect undraggable">
                <div class="ui green inverted statistic noselect undraggable">
                    <div id="statsSize" class="value noselect undraggable">
                        0
                    </div>
                    <div class="label noselect undraggable">
                        Points Plotted
                    </div>
                </div>
                <div class="ui blue inverted statistic noselect undraggable">
                    <div id="clusterSize" class="value noselect undraggable">
                        0
                    </div>
                    <div class="label noselect undraggable">
                        Clusters
                    </div>
                </div>
            </div>
            <div class="ui divider noselect undraggable"></div>
            <i class="ui white big undo icon noselect undraggable" style="cursor: pointer;"></i>

            <div class="ui inverted toggle checkbox noselect undraggable">
                <label id="rotateLabel" class="noselect undraggable">Rotate</label>
                <input type="checkbox" class="noselect undraggable" name="rotateCheckbox" onClick="rotateToggle()">
            </div>

            <div class="ui divider noselect undraggable"></div>
            <div id="clusterInfo" class="noselect undraggable">          
            </div>

        </div>

        <i class="fixed big white info icon noselect undraggable" style="cursor: pointer;" id="infoButt"></i>

        <!--PUSHER -->
        <div class="pusher">
            <canvas id="data-canvas"></canvas>
            <div class="ghost-select"><span></span></div>
            <div id="loader">
                <div class="ui large indeterminate loader"></div>
            </div>
        </div>

        <script src="~/js/dreda.js"></script>
        <script src="~/js/ui.js"></script>
    <script>
        var currentClusters;
        var selectedColor;
        $(document).ready(function() {

            //stop rotation

            //download current result
            @{
                if (Model.Any(analysis => analysis.ResultFilePath != null && !analysis.ResultFilePath.Equals("")))
                {
                    <text>
                        DownloadCurrentResult();
                        selectedColor = colors[0];
                        //fill the color selector
                        fillColorSelector();
                        </text>
                }
            }

            //remove after testing
            $('#analysisSelect').on('change', function() {
                $('#deleteButton').attr('analysis', this.value);
                DownloadCurrentResult();
            });

            $('#deleteButton').click(function(e) {

                var id = $(this).attr("analysis");

                location.href = '@Url.Content("~/Analyses/Delete/")' + id;
            });
        });

        function DownloadCurrentResult() {

            currentClusters = [];

            $("#loader").addClass("ui active dimmer");

            $.ajax({
                type: "POST",
                async: true,
                url: "/File/DownloadResult?analysisId=" + $('#analysisSelect option:selected').attr("value")
            }).done(function(model) {

                if (model !== undefined && model !== "") {
                    //test
                    data = JSON.parse(model);
                    //plot the graph
                    plot(data);

                    //add the clusters
                    getClusters();
                } else {
                    $("#loader").removeClass("ui active dimmer");
                    alert("This file is corrupted. Press the red button to delete it");
                }
            }).fail(function() {
                $("#loader").removeClass("ui active dimmer");
                alert("failed");
            });
        }

        function get_content() {
            var html = document.getElementById("txt").innerHTML;
            document.getElementById("txt").innerHTML = html.replace(/<[^>]*>/g, "");
        }

        function fillColorSelector() {
            $('#clusterInput').after('<select class="form-control" id="colorselector" style="margin: 10px;"></select>');

            for (var i = 0; i < colors.length; i++) {
                $('#colorselector').append('<option value="' + i + '" data-color="' + colors[i].toUpperCase() + '"></option>');
            }

            $('#colorselector').colorselector({
                callback: function(value, color, title) {
                    selectedColor = color;
                    window.colorSelectedPoints(selectedColor);
                }
            });
        }

        //TODO: should keep them painted after trying to select a new one
        function addCluster() {

            if (selectionCube === undefined) return;

            //get the cluster name
            var clusterName = $("#clusterInput").val();

            //if the name is empty don't do anything else
            if (clusterName === undefined || clusterName === "") return;

            //loading animation
            $("#loader").addClass("ui active dimmer");

            //get the id of the current analysis
            var analysisId = $('#deleteButton').attr('analysis');

            //remove hashtag from hex
            var color = selectedColor.split("#");

            var fakeModel = {
                Id: analysisId,
                Name: clusterName,
                Color: color[1],
                Depth: selectionCube.scale.x,
                Width: selectionCube.scale.y,
                Height: selectionCube.scale.z,
                X: selectionCube.position.x,
                Y: selectionCube.position.y,
                Z: selectionCube.position.z
            };
            var jsonModel = JSON.stringify(fakeModel);
            //END

            $.ajax({
                type: "GET",
                async: true,
                url: "/Clusters/SaveCluster?model=" + jsonModel
            }).done(function(model) {

                var json = JSON.parse(model);
                //if everything worked, remove the loading screen and add the cluster to the list of clusters
                $("#loader").removeClass("ui active dimmer");
                //   $('#clusterInfo').append('<div style="color:' + selectedColor + ';">' + clusterName + '</div>');
                $('#clusterInfo').append('<input class="clusterCheck" style="margin-right: 10px;" type="checkbox" name="' + clusterName + '" value="' + json.Id + '"><span id="cluster' + json.Id + '" style="color:' + selectedColor + ';">' + clusterName + '</span></br>');
                var currentClusterNum = $("#clusterSize").text();
                $("#clusterSize").text(++currentClusterNum);
            }).fail(function() {
                //if failed, remove the loading screen and notify user
                $("#loader").removeClass("ui active dimmer");
                alert("failed to add cluster");
            });
        }

        function removeCluster() {

            var clustersToBeDeleted = [];
            var checkBoxesToBeRemoved = [];

            $('.clusterCheck').each(function(i) {

                if ($(this).is(":checked")) {
                    var id = $(this).val();
                    clustersToBeDeleted.push({ Id: id });

                    var checkBox = $(this);
                    checkBoxesToBeRemoved.push(checkBox);

                    //loading screen
                    $("#loader").addClass("ui active dimmer");
                }
            });

            if (clustersToBeDeleted.length < 1) return;

            var model = JSON.stringify(clustersToBeDeleted);

            $.ajax({
                type: "POST",
                async: true,
                url: "/Clusters/RemoveCluster?model=" + model
            }).done(function(model) {
                //if everything worked, remove the loading screen and remove the cluster from the list of clusters
                $("#loader").removeClass("ui active dimmer");

                for (var j = 0; j < checkBoxesToBeRemoved.length; j++) {
                    $('#cluster' + clustersToBeDeleted[j].Id).next().remove();
                }

                for (var i = 0; i < checkBoxesToBeRemoved.length; i++) {
                    $(checkBoxesToBeRemoved[i]).remove();
                }

                var currentClusterNum = $("#clusterSize").text();
                $("#clusterSize").text(currentClusterNum - checkBoxesToBeRemoved.length);
            }).fail(function() {
                //if failed, remove the loading screen and notify user
                $("#loader").removeClass("ui active dimmer");
                alert("failed to remove cluster");
            });


        }

        function getClusters() {
            //get the id of the current analysis
            var analysisId = $('#deleteButton').attr('analysis');

            //if there is no id return
            if (analysisId === undefined || analysisId === "") return;

            //loading screen
            $("#loader").addClass("ui active dimmer");

            $.ajax({
                type: "GET",
                async: true,
                url: "/Clusters/GetClusters?id=" + analysisId
            }).done(function(model) {

                if (model !== undefined) {
                    //if everything worked, remove the loading screen and add the clusters to the list of clusters
                    var json = JSON.parse(model);

                    $("#clusterSize").text(json.length);
                    for (var i = 0; i < json.length; i++) {

                        var cluster = json[i];

                        currentClusters.push(cluster);

                        var split = cluster.Name.split("#");

                        var color = "#" + split[1];

                        var height = cluster.Height;
                        var depth = cluster.Depth;
                        var width = cluster.Width;
                        var x = cluster.X;
                        var y = cluster.Y;
                        var z = cluster.Z;

                        window.selectionCube.scale.x = depth;
                        window.selectionCube.scale.y = width;
                        window.selectionCube.scale.z = height;
                        window.selectionCube.position.x = x;
                        window.selectionCube.position.y = y;
                        window.selectionCube.position.z = z;

                        window.colorSelectedPoints(color);

                        $('#clusterInfo').append('<input id="cluster' + cluster.Id + '" class="clusterCheck" style="margin-right: 10px;" type="checkbox" name="' + split[0] + '" value="' + cluster.Id + '"><span style="color:' + color.toUpperCase() + ';">' + split[0] + '</span></br>');
                    }

                    //clean selectionCube coordinates
                    window.selectionCube = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1, 20, 20, 20), new THREE.MeshBasicMaterial({ color: 'red', opacity: 0.8 }));

                    $("#loader").removeClass("ui active dimmer");
                }

            }).fail(function() {
                //if failed, remove the loading screen and notify user
                $("#loader").removeClass("ui active dimmer");
                alert("failed to retrieve clusters");
            });
        }


    </script>

        <script type="x-shader/x-vertex" id="vertexshader">

            attribute float alpha;

            varying float vAlpha;

            void main() {

            vAlpha = alpha;

            vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );

            gl_PointSize = 8.0;

            gl_Position = projectionMatrix * mvPosition;

            }

        </script>

        <script type="x-shader/x-fragment" id="fragmentshader">

            uniform vec3 color;

            varying float vAlpha;

            void main() {

            gl_FragColor = vec4( color, vAlpha );

            }

        </script>
    </div>
</div>